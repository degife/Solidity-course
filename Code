
//Storage Variables Add two boolean variables

// SPDX-License-Identifier: MIT
Add two boolean variables
Create two public boolean storage variables on the contract: a and b.

Store true in the variable a and false in the value b.
pragma solidity ^0.8.20;

contract Contract {
    bool public a = true;
    bool public b = false;
}

//Unsigned Integers
Create Unsigned Integers!
Let's create three public storage unsigned integers in our Contract: a, b, and sum.

Define the variable a as an uint8 with an initial value between 0 and 255.

Define the variable b as an uint16 with a value of at least 256.

The variable sum should be a uint256 with the sum of the values stored in a and b.

contract Contract {
   uint8 public a = 34;
   uint16 public b  = 256;
   uint256 public sum = a+b;

}

//Create Signed Integers!

//Returning Values
//Create an external view function add which takes a uint parameter and returns the sum of the parameter plus the state variable x.
contract Contract {
    uint public x;
   
     
    constructor(uint _x)
    {
        x = _x;
    }
    
    function increment()public
        {
         x+=1;
        }
      
  function add(uint _value) external view returns (uint) {
        return x + _value;
    }

}

//String Literals
// Public bytes32 storage variable to store the "Hello World" message
    bytes32 public msg1 = "Hello World"; // This fits within 32 bytes

    // Public string storage variable to store a longer message
    string public msg2 = "Hello World, welcome to the world of Solidity!"; // Longer than 32 bytes

//Enum Type
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract Contract {
    // Enum declaration
    enum Foods { Apple, Pizza, Bagel, Banana }

    // Storing enum values in variables
    Foods public food1 = Foods.Apple;   // Apple corresponds to 0
    Foods public food2 = Foods.Pizza;   // Pizza corresponds to 1
    Foods public food3 = Foods.Bagel;   // Bagel corresponds to 2
    Foods public food4 = Foods.Banana;  // Banana corresponds to 3
}


//Using Console.log
When developing smart contracts, Foundry makes it super easy to write Solidity unit tests, among many other features. 
We are using foundry for code execution in this very code lesson! For that reason, you can make use of the console library, 
for logging console data when you need to test something!
import "forge-std/console.sol";

contract C {
  function x() external {
    if(condition) {
      console.log("condition was met!");
    }
  }
}
//Store the Owner
Create a public address state variable called owner on the contract
Next create a constructor function which will store the msg.sender in owner
pragma solidity ^0.8.20;

contract Contract {
    // Public address state variable to store the owner's address
    address public owner;

    // Constructor sets the deployer of the contract as the owner
    constructor() {
         owner = msg.sender;
}
}

//Transfer Tips
Create a public payable function tip which sends any of its received ether to the owner.
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract Contract {
    // Public address state variable to store the owner's address
    address public owner;

    // Constructor sets the deployer of the contract as the owner
    constructor() {
         owner = msg.sender;
}
 // Function to receive Ether without calldata
    receive() external payable {}
    // Payable function that sends received Ether to the owner
    function tip() public payable {
        require(msg.value > 0, "No Ether sent");

        (bool sent, ) = owner.call{value: msg.value}("");
        require(sent, "Failed to send Ether to owner");
    }
}
